# TODO: 동적계획법 (Dynamic Programming)
# 목적 : 완전탐색, DFS, BFS와 같이 수 많은 경우의 수를 전부 따져야할 때, 
# 수행시간을 단축하고자 만들어진 알고리즘


# [1] DP(기억하며 풀기)의 목적 : 
# 메모리를 사용해서 중복 연산을 줄이고,중복 연산을 줄여서 수행 속도를 개선한다.
# 여기서 메모리를 사용한다. -> 또 하나의 배열 혹은 자료 구조를 만든다.
# 중복 연산을 줄인다. -> 한 번 연산한 결과를 배열에 담아 다시 연산하지 않도록하여 중복 연산을 줄인다.


# [2] DP 문제를 알아보고 구분하는 방법:
# 1. DFS/BFS로 풀 수는 있지만 경우의 수가 너무 많은 문제 
# DFS/BFS로 풀 수 있는 마지노선은 최대 500만개! 그 이상은 힘들다.
# 2. 경우의 수들에 중복적인 연산이 많은 경우

# [3] 문제 해결 접근 방법 :
# 최대한 문제를 많이 풀고, 풀이들을 참고하면서 DP식 사고방식을 습득
# 혼자 터득하기 매우 어려운 알고리즘이므로, 오래 붙잡고 있기 보다는 30분 고민 후 답이 안 나오면
#MEMO: 풀이를 참고해서 '구현만' 해보는 방식을 매우 추천!!
# 포인트는 현재 단계만 직전 단계만 고려할 수 있도록(즉, 그 전의 단계로 다시 돌아가지않도록)
# 어떤 식으로 정보를 누적해야할지 고민하기

#MEMO: DP 삼각형과 같이 나만의 자료구조를 하나 더 만들고, 어떤 정보를 담아야 이전 단계로 돌아가지 않을지 고민