# TODO: 부분 집합 

# [ ] 부분 집합 합 문제
# 유한 개의 정수로 이루어진 집합이 있을 때, 이 집합의 부분 집합 중에서 
# 그 집합의 원소를 모두 더한 값이 0이 되는 경우가 있는지를 알아내는 문제

# Solution : 완전 검색 기법으로 부분 집합 합 문제를 풀기 위해서는 
# 우선 집합의 모든 부분 집합을 생성한 후 각 부분 집합의 합을 계산함

# [ ] 부분 집합의 수 
# 어떤 집합의 부분 집합을 구할 경우 부분 집합의 촘 개수가 몇 개일까요?
# 원소의 개수가 n일 떄, 2^n개 

# [ ] 간결하게 부분 집합을 생성하는 방법
arr = [3,6,7,1,5,4]
n = len(arr)

for i in range(1<<n):
    for j in range(n):
        if (i&(1<<j)):
            print(arr[j],end=",")
    print()

#[ ] Bit 연산자 
# 인덱스   [4]  [3] [2] [1] [0]
# 이진수     1   1   1   0   1
# 자릿수   2^4 2^3 2^2 2^1 2^0

#         =>  11101(2) = 29(10)

# Shift 
# >> : 오른쪽으로 비트 옮기기 1110 >> 2 = 11
# << : 왼쪽으로 비트 옮기고 오른쪽을 모두 0으로 채움 1<<3 => 1000(2^3)
# 따라서 1<< n = 2^n 을 의미함. 또한 원소의 개수가 n일 떄, 부분집합 개수는 2^n개을 의미
# NOTE: 즉, 원소가 n개일 때 부분집합의 개수를 1<<n (2^n)으로 간편하게 구할 수 있음! 