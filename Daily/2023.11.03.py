#TODO: '이것이 코딩테스트다 4강 리스트 자료형까지 공부하기'

# 빅오 표기법 : 가장 빠르게 증가하는 항만 고려하는 표기법임 -> 성능을 고려하는 목표 
# TIP: PyPy의 경우 빠르게 동작하므로 제출해보기. 
# TIP: 일반적으로 코테 수행시간은 1~5초

# 시간 제한이 1초인 문제를 만났을 떄 
# N의 범위가 500 -> N^3, 2000-> N^2, 100,000 -> NlogN, 10,000,000 -> N

# TIP: 알고리즘 문제 해결 과정
# 지문 읽고 문제 완전히 이해 -> 요구사항 분석(시간,공간 복잡도 제한 분석) -> 해결을 위한 아이디어 찾기 -> 코딩 
# 바로 코딩으로 들어가지말고 문제를 완전히 이해하고 코딩하기

# TIP: 수행시간 측정 소스코드 예제 

import time 

start = time.time()
for i in range(5000):
    i += 2
end = time.time()

print(f'저의 수행시간은 {end-start}')

# TIP: 자료형
# 지수 표현 방식 : 
print(f'파이썬에서 1e20은 {1e2}을 의미합니다.')

# TIP: 사칙연산 연산자
# 나눗셈 연산자 : /, 나머지 연산자: %, 몫 연산자 : //, 거듭제곱 : **

# TIP: 리스트 초기화 
# 크기가 n이고, 모든 값이 0인 1차원 리스트 초기화 
n = 20
list = [100]*n
print(list)

# TIP: 리스트의 인덱싱과 슬라이싱 
# 인덱싱이란 ? 인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것을 의미함.
a = [0,1,2,3,4,5,6]
a[3] = 5000
print(f'인덱싱하여 리스트 값에 접근하기 {a[3]},{a[-4]}')

# 슬라이싱이란? 연속적인 위치를 갖는 원소들을 가져오는 것을 의미함. [시작인덱스:끝인덱스+1]
print(f'슬라이싱: {a[0:5]}')

#TIP: list comprehension

array = [i+1 for i in range(20)]
print(array)

array_half = [i+1 for i in range(40) if i % 2 == 0]
print(array_half)

# 리스트에 모두 동일한 값이 들어가도록 초기화할 떄
array = [2]*n

# 리스트에 증감이나 조건을 추가하여 초기화 할 때
array = [i*i for i in range(5) if i % 2 != 0]
print(array,i)

#TIP: 2차원 리스트 초기화하기

array_2 = [[3]*5 for _ in range(5)]
print(f'array_2: {array_2}')