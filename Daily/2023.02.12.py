# 그리디 알고리즘
# 현재 상황에서 지금 당장 좋은 것만 고르는 방법을 의미
# 일반적으로는 알고리즘을 풀기 위해 최소한의 아이디어를 떠올릴 수 있는 능력을 요구.
# ** 정당성 분석이 매우 중요 : 단순히 가장 좋아 보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토

# 그리디 알고리즘은 '트리 문제'처럼 단계별로 선택을 할 때, 항상 그 단계 순간마다의 최선을 선택을 하는 알고리즘
# 따라서 일반적인 상황에서 그리디 알고리즘은 최적의 해를 보장할 수 없을 때가 많다.
# but, 코딩 테스트는 그리디 해가 최적의 해가 되는 경우에만 출제하는 것이 대부분

# **** 거스름 돈 : 문제 해결 아이디어
# 최적의 해를 빠르게 구하기 위해서는 '가장 큰 화폐 단위 부터' 돈을 거슬러 준다.
# 가장 큰 단위부터 돈을 거슬러 주는 것이 최적의 해를 보장하는 이유는 무엇일까?
####  => 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없어서.
# 문제 ! : 800원을 거슬러 주어야하는데 화폐 단위가 500,400,100원이라면 어떻게 될까요?

# *** 거스름 돈 : 문제 해결하기 ***
# Q1. 동전이 500,100,50,10 단위로 무수히 많을 때, 가장 적은 동전 수로 1260원 거슬러 주기.

n = 1260 # 거슬러 줄 돈
count = 0
coin = [500,100,50,10] # 거슬러 줄 수 있는 동전 단위

for i in coin :
    count += n // i
    n %= i
print(count)

# 거스름 돈 : 시간 복잡도 분석하기
# 해당 문제는 거스름돈에 관계없이 화폐의 단위만큼 반복하므로 화폐 단위 수에 비례 즉, Q(n)
