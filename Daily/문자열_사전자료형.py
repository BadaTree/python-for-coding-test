# TODO: 5강 문자열 ~ 6강 

# TIP: 문자열 자료형 (큰, 작은 따옴표)

print("Hello world \"'python\"'")

# TIP: 문자열 +은 연결, *은 여러번 반복 
#NOTE: 인덱싱과 슬라이싱 가능하지만 원 값 변경 불가(Immutable)

a = "ABCDEFGHI"
print(a[2:5])

# TIP: 튜플 자료형 : 
# 한 번 선언된 이후 변경 불가. 
# 리스트는 대괄호 이용, 튜플은 소괄호 이용 
# NOTE: 리스트에 비해 공간 효율적 

a = (1,2,3,4,5)
print(a[1])
print(a[2:4])
# a[0] = 100 튜플은 상수와 같이 값이 변경불가라서 에러 발생 

# NOTE: 튜플이 사용되는 좋은 경우 1. 서로 다른 성질 데이터를 묷을 때, 2. 해싱의 키로 3. 리스트보다 메모리를 효율적으로 사용해야할 떄

# TIP: 사전 자료형 (딕셔너리) , 키와 값을 쌍으로 가짐
# 키는 변경 불가능한 자료형으로 사용 , 데이터 조회 및 수정의 O(1)을 가짐

# 한영 사전의 기능을 하는 딕셔너리를 생성하고, '체리'를 키를 가지는 값이 있는지 조회
dict = dict()
dict['사과'] = 'apple'
dict['망고'] = 'manggo'
dict['복숭아'] = 'peach'

if '체리' in dict :
    print('"체리"를 키로 가지는 데이터가 존재합니다.')
else:
    print('"체리"를 키로 가지는 데이터가 존재하지 않습니다.')    

# TIP: 사전 자료형에서 키 값만 뽑고 싶을 떄 : .key(), 값만 .values()

print(f'키 리스트 {dict.keys()}')
print(f'값 리스트 {dict.values()}')

# TIP: 집합 자료형 : 
# NOTE: 중복을 허용하지 않음. 순서가 없다 
# NOTE: 리스트 혹은 문자열을 이용하여 초기화한다. : set() or ({,,,})

a = set([1,2,2,2,2,2,3,4])
b = {1,1,1,1,1,1,2,3,3,5}
print(f'a = {a}, b = {b}')

# NOTE: 집합에서는 합,교, 차 집합을 지원한다.
print(f'합집합{a|b}, 교집합{a&b}, 차집합{a-b} ')

# NOTE: 집합 자료형 관련 함수 

# 새로운 원소 하나 추가 
a.add(7)
print(a)

# 새로운 원소 여러개 추가 
b.update([6,7,8])
print(b)

# 특정한 값 원소 삭제 
b.remove(7)
print(b)

# NOTE : 리스트,튜플은 순서가 있어 인덱싱 가능 . 딕셔너리와 집합은 순서가 없음 -> 인덱싱 불가능
# 사전과 집합은 O(1)의 시간 복잡도를 가진다.
